import { QLearner } from "./q-learning";

class UIElement {
    private property_count:number;
    private current_property:number = 0;
    private name:string = '';

    constructor(p_count:number, current_property:number, name:string){
        this.property_count = p_count;
        this.current_property = current_property;
        this.name = name;
    }

    setProperty = (property:number) => {
        this.current_property = property;
    }
    getProperty = () => {
        return this.current_property;
    }
    getPropertyCount = () => {
        return this.property_count;
    }
}

class EmotionalState {
    private current_emotion = 0;

    constructor(emotion:number) {
        this.current_emotion = emotion;
    }
    setCurrentEmotionalState = (emotion:number) => {
        this.current_emotion = emotion;
    }
    getCurrentEmotion = () => {
        return this.current_emotion;
    }
}

class Agent {
    private emotionalState:EmotionalState;
    private UIElements:UIElement[] = [];
    private gamma = 0.9;
    private learningRate = 0.9;
    private epsilon = 0.9;
    private learner = new QLearner(this.gamma,this.learningRate)

    constructor(emotion:number){
        this.emotionalState = new EmotionalState(emotion)
    }

    addUIElement = (uiElement:UIElement) => {
        this.UIElements.push(uiElement)
    }
    getUIElements = () => {
        return this.UIElements;
    }
    getUIElement = (element:number) => {
        return this.UIElements[element];
    }
    setEmotionalState = (emotionalState:EmotionalState) => {
        this.emotionalState = emotionalState; 
    }
    randomAction(){
        let rand = Math.random()
        if (rand<0.33) return -1
        if (rand<0.67) return 0
        return 1
    }
    init = () => {
        
        for (let i = 0; i < this.getUIElement(0).getPropertyCount(); i++) {
            for (let j = 0; j < this.getUIElement(0).getPropertyCount(); j++) {
                for (let k = 0; k < this.getUIElement(0).getPropertyCount(); k++) {
                    for (let l = 0; l < 7; l++) {
                        this.learner.addState([i,j,k,l])
                    }
                }
            }
        }
        

        this.learner.add([0,0,0,1],[0,1,1,1],1)
        
        //console.log(this.learner.states)
        console.log(this.learner.qValuesTable)

    }
}



const agent = new Agent(3)

agent.addUIElement(new UIElement(3,2,'element1'))
agent.addUIElement(new UIElement(3,2,'element2'))
agent.addUIElement(new UIElement(3,2,'element3'))

agent.init()

